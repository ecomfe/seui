<template>
    <div class="demo-section">
        <h3>关于表单域</h3>
        <p>对于一个 formItem 内嵌的 表单控件可以自定义和扩展，只需要在控件内部实现对应的api。
            seui 内部的表单控件都会实现 dispatch UI:form-item-interact 来出发验证。
            通常情况下，自定义组建只需要在特定的时机（一般是通过事件触发了值的更改）dispatch UI:form-custom-interact
            事件就可以实现自动验证。

            但需要注意的是，如果你的自定义控件使用了已经实现了该
            dispatch 的子组件(你需要确认子组建中没有 dispatch 该事件)，则需要中断子组件的这个事件。
            具体实现可参考 example/Form/Area 自定义组件的实现。
        </p>
        <ui-form
            formModel="{=formAreaModel=}"
            san-ref="formAreaModel">
            <ui-form-item
                rules="{{formAreaRules}}"
                prop="areaValue"
                helpText="请先选择类型，再输入对应的值"
                label="联系方式">
                <ui-area
                    value="{=formAreaModel.areaValue=}"
                    options="{{options}}"
                ></ui-area>
            </ui-form-item>
            <ui-form-item>
                <ui-button class="submit-button" on-click="submitForm('formAreaModel')" ui="primary small">提交</ui-button>
                <ui-button class="submit-button" on-click="resetForm('formAreaModel')" ui="primary small">重置</ui-button>
            </ui-form-item>
        </ui-form>
    </div>
</template>

<script>
import Form from '../../../src/components/Form';
import FormItem from '../../../src/components/FormItem';
import Button from '../../../src/components/Button';
import Area from './Area';

export default {
    components:{
        'ui-button': Button,
        'ui-form': Form,
        'ui-form-item': FormItem,
        'ui-area': Area
    },
    initData() {
        return {
            formAreaModel: {
                areaValue: {
                    type: '3',
                    contact: 'zidane'
                }
            },
            formAreaRules: [
                {
                    validator(rule, value, callback) {
                        if (!value || !value.type) {
                            callback([new Error('请选择联系方式!')]);
                        }
                        else {
                            if (value.type === '1') {
                                if (!/^[1][3,4,5,7,8][0-9]{9}$/.test(value.contact)) {
                                    callback([new Error('请输入正确的手机号码!')]);
                                }
                                else {
                                    callback([]);
                                }
                            }
                            else if (value.type === '2') {
                                if(!/^(0[0-9]{2,3}\-)?([2-9][0-9]{6,7})+(\-[0-9]{1,4})?$/.test(value.contact)) {
                                    callback([new Error('请输入正确的电话号码(区号后加-)号码!')]);
                                }
                                else {
                                    callback([]);
                                }
                            }
                            else if (value.type === '3') {
                                if(!/^[A-Za-z\d]+([-_.][A-Za-z\d]+)*@([A-Za-z\d]+[-.])+[A-Za-z\d]{2,4}$/.test(value.contact)) {
                                    callback([new Error('请输入正确的邮箱!')]);
                                }
                                else {
                                    callback([]);
                                }
                            }
                            else {
                                callback([new Error('该联系方式不可用!')]);
                            }
                        }
                    }
                }
            ],
            options: [
                {
                    value: '1',
                    label: '手机'
                },
                {
                    value: '2',
                    label: '电话'
                },
                {
                    value: '3',
                    label: '邮箱'
                }
            ]
        };
    },
    submitForm(formName) {
        let formModel = this.data.get(formName);
        if (formName === 'formModel') {
            this.data.set('formStatus', 'validating');
        }
        this.ref(formName).validate((valid) => {
            this.data.set('formStatus', 'validateEnd');
            if (valid) {
                // 验证成功 do someThing
                console.log(formModel);
            } else {
                // 验证失败 do someThing
                console.log(valid)
            }
        });
    },
    resetForm(formName) {
        this.ref(formName).resetFields();
    }
}
</script>
